<style>

.container {
    display: flex;
    width: 600px;
    height: 320px;
    align-items: end;
    justify-content: center;
    border-bottom: 20px solid black;
    border-radius: 20px;
}

#title {
    text-align: center;
    margin-top: 50px;
    font-size: 55px;
    font-family: 'Times New Roman', Times, serif;
    font-style: oblique;
}

title:visited {
    color: rgb(201, 87, 87);
    background-color: aqua;
}

#title p {
    margin: 0px;
}

#moves {
    font-size: 22px;
    font-style: normal;
    font-weight: 600;
    font-family: sans-serif;
    color: brown;
}

#currentMoves {
    font-size: 26px;
    font-style: normal;
    font-weight: 600;
    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
    color: navy;
}

.tower {
    height: 220px;
    width: 16px;
    background-color: rgb(78, 5, 5);
    border-top-left-radius: 30px;
    border-top-right-radius: 30px;
    display: flex;
    flex-direction: column-reverse;
    justify-content: end;
    align-items: center;
    z-index: 1;
}

.tower:hover {
    color: blue;
    background-color: green;
}

tower::after {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

#tower2 {
    margin-left: 180px;
}

#tower3 {
    margin-left: 180px;
}

.start-button {
    text-align: center;
    margin-top: 60px;
}

.btn {
    size: 90px;
}

.disk {
    border-radius: 20px;
    z-index: 2;
}

#disk1 {
    height: 25px;
    width: 140px;
    background-color: rgb(199, 6, 6);
}

#disk2 {
    height: 25px;
    width: 120px;
    background-color: indigo;
}

#disk3 {
    height: 25px;
    width: 100px;
    background-color: rgb(7, 7, 190);
}

#disk4 {
    height: 25px;
    width: 80px;
    background-color: rgb(2, 131, 2);
}

#disk5 {
    height: 25px;
    width: 60px;
    background-color: rgb(190, 205, 50);
}

#disk6 {
    height: 25px;
    width: 40px;
    background-color: orange;
}

</style>

<div id="title">
<p class="title"> <a href="https://www.google.com/">Tower Of Honoi</a></p>
<p id="moves">Minimun Moves: </p>
<p id="currentMoves">Current Moves: </p>
</div>
<div class="container">
<div id="tower1" class="tower"></div>
<div id="tower2" class="tower"></div>
<div id="tower3" class="tower"></div>
</div>
<div class="start-button">
<button class="btn btn-outline-dark">Start New Game</button>
</div>


<script>

    function initializeTowerOfHanoi() {

        var count = 0;
        // Tower arrays
        const tower1array = [];
        const tower2array = [];
        const tower3array = [];

        //Creating dynamic disks
        function createDivs(num) {
            const tower1 = document.querySelector('#tower1');
            for (let i = 1; i <= num; i++) {
                const div = document.createElement('div');
                div.className = 'disk';
                div.id = `disk${i}`;
                tower1array[i - 1] = i;
                tower1.appendChild(div);
            }
        }
        //To change number of disks
        var numOfDisks = 6;
        createDivs(numOfDisks);

        if (numOfDisks > 6) {
            alert("Select a number of Disks between 1-6");
            window.location.reload();
        }

        //Minimum Moves
        const minimunMoves = document.getElementById('moves');
        if (numOfDisks == 1) {
            minimunMoves.textContent += 1;
        }
        else if (numOfDisks == 2) {
            minimunMoves.textContent += 3;
        }
        else if (numOfDisks == 3) {
            minimunMoves.textContent += 7;
        }
        else if (numOfDisks == 4) {
            minimunMoves.textContent += 15;
        }
        else if (numOfDisks == 5) {
            minimunMoves.textContent += 31;
        }
        else {
            minimunMoves.textContent += 63;
        }

        const currentMoves = document.getElementById('currentMoves');
        currentMoves.textContent = `Current Moves: ${count}`;


        //Drag
        $(".disk").draggable({
            revert: function (dropped) {
                if (!dropped) {
                    return true;
                }
            },
        });

        //Drop
        $(".tower").droppable({
            drop: function (event, ui) {
                //ids of dropped disk-tower 
                const diskId = ui.draggable.attr('id');
                const towerId = $(this).attr('id');

                const idNum = parseInt(diskId.match(/\d+/)[0]);

                //checking from which tower disk dragged and if it is top disk or not
                var diskInArray = null;

                if (tower1array.includes(idNum)) {
                    diskInArray = 1;
                    if (tower1array[tower1array.length - 1] != idNum) {
                        // It is not the top disk of the tower, don't drop the disk
                        ui.draggable.draggable("option", "revert", true);
                        return;
                    }
                }
                else if (tower2array.includes(idNum)) {
                    diskInArray = 2;
                    if (tower2array[tower2array.length - 1] != idNum) {
                        // It is not the top disk of the tower, don't drop the disk
                        ui.draggable.draggable("option", "revert", true);
                        return;
                    }
                }
                else if (tower3array.includes(idNum)) {
                    diskInArray = 3;
                    if (tower3array[tower3array.length - 1] != idNum) {
                        // It is not the top disk of the tower, don't drop the disk
                        ui.draggable.draggable("option", "revert", true);
                        return;
                    }

                }
                //pushing and poping the disk from one array to other
                if (towerId == "tower2") {
                    //if last disk in tower is smaller than dropped disk then don't drop
                    if (tower2array[tower2array.length - 1] > idNum) {
                        ui.draggable.draggable("option", "revert", true);
                        return;
                    }
                    else if (diskInArray == 1) {
                        tower2array.push(tower1array[tower1array.length - 1]);
                        tower1array.pop();

                        const disk = document.getElementById(`disk${idNum}`);
                        disk.remove();
                        const tower2 = document.querySelector('#tower2');
                        tower2.appendChild(disk);
                        disk.style.top = '0';
                        disk.style.left = '0';
                    }
                    else if (diskInArray == 3) {
                        tower2array.push(tower3array[tower3array.length - 1]);
                        tower3array.pop();
                        const disk = document.getElementById(`disk${idNum}`);
                        disk.remove();
                        const tower2 = document.querySelector('#tower2');
                        tower2.appendChild(disk);
                        disk.style.top = '0';
                        disk.style.left = '0';
                    }
                }
                if (towerId == "tower3") {
                    if (tower3array[tower3array.length - 1] > idNum) {
                        ui.draggable.draggable("option", "revert", true);
                        return;
                    }
                    else if (diskInArray == 1) {
                        tower3array.push(tower1array[tower1array.length - 1]);
                        tower1array.pop();
                        const disk = document.getElementById(`disk${idNum}`);
                        disk.remove();
                        const tower3 = document.querySelector('#tower3');
                        tower3.appendChild(disk);
                        disk.style.top = '0';
                        disk.style.left = '0';
                    }
                    else if (diskInArray == 2) {
                        tower3array.push(tower2array[tower2array.length - 1]);
                        tower2array.pop();
                        const disk = document.getElementById(`disk${idNum}`);
                        disk.remove();
                        const tower3 = document.querySelector('#tower3');
                        tower3.appendChild(disk);
                        disk.style.top = '0';
                        disk.style.left = '0';
                    }
                    if (tower3array.length == numOfDisks) {
                        alert(`You solved the puzzle in just ${count + 1} moves`);
                        window.location.reload();
                        return;
                    }
                }
                if (towerId == "tower1") {
                    if (tower1array[tower1array.length - 1] > idNum) {
                        ui.draggable.draggable("option", "revert", true);
                        return;
                    }
                    else if (diskInArray == 2) {
                        tower1array.push(tower2array[tower2array.length - 1]);
                        tower2array.pop();
                        const disk = document.getElementById(`disk${idNum}`);
                        disk.remove();
                        const tower1 = document.querySelector('#tower1');
                        tower1.appendChild(disk);
                        disk.style.top = '0';
                        disk.style.left = '0';
                    }
                    else if (diskInArray == 3) {
                        tower1array.push(tower3array[tower3array.length - 1]);
                        tower3array.pop();
                        const disk = document.getElementById(`disk${idNum}`);
                        disk.remove();
                        const tower1 = document.querySelector('#tower1');
                        tower1.appendChild(disk);
                        disk.style.top = '0';
                        disk.style.left = '0';
                    }
                }
                count++;
                currentMoves.textContent = `Current Moves: ${count}`;
            }
        });
        $(".start-button").click(function () {
            var confirmed = confirm("Are you sure you want to terminate and start a new game?");
            if (confirmed) {
                window.location.reload();
            }
        });
    }
    initializeTowerOfHanoi();

</script>